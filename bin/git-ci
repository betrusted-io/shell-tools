#!/bin/sh
# git-ci
# Tracks changes in git (and submodules) between CI tests
# usage:
#   git-ci --before
#   test....
#   git-ci --after $? --notify

program=$(basename $0)
dir=$(dirname $0)
cwd=$(pwd -P)

# general functions
. $dir/common.sh

# program specific functions
do_usage() {
  cat >&2 << EOF
usage: ${program} [OPTIONS]
       OPTIONS
           [-a,--after] RESULT   test result status
           [-A,--notify-add] SUB EMAIL add notifications for submodule
           [-b,--before]         record versions before test
           [-c,--changes]        show version changes
           [-C,--current]        show current versions
           [-D,--notify-delete] SUB EMAIL delete notifications for submodule
           [-h,--help]           help
           [-l,--list]           list submodules
           [-L,--notify-list] SUB...  list notifications for submodule(s)
           [-n,--notify]         send notifications on failure
           [-p,--prev]           show previous versions
           [-v,--verbose]        verbose
EOF
    exit 1
}


# escape submodule name
submodule_escape() {
    echo "$1" | tr / %
}

# unescape submodule name
submodule_unescape() {
    echo "$1" | tr % /
}

# list submodules
do_list() {
    if [ -r ".gitmodules" ]; then
        git config --file ".gitmodules" --get-regexp url | cut -d. -f2
    fi
}

# list notification for submodule(s)
do_notify_list() {
    [ $# -lt 1 ] && err "usage: do_notify_list SUB.." && return 1
    local notify
    for sub in $*; do
        notify=$(git config --file .gitmodules --get "submodule.$sub.notify")
        printf "%s\t%s\n" "$sub" "$notify"
    done
}

# add notification for submodule
do_notify_add() {
    [ $# -ne 2 ] && err "usage: do_notify_add SUB EMAIL" && return 1
    local sub="$1"
    local email="$2"
    local notify
    if member_of "$sub" $(do_list) ; then
        notify=$(git config --file .gitmodules --get "submodule.$sub.notify")
        notify="$notify $email"
        verr "setting notifications for $sub to $notify"
        git config --file .gitmodules --add "submodule.$sub.notify" "$notify"
    else
        err "do_notify_add: not a submodule: $sub"
        return 1
    fi
    return 0
}

# delete notification for submodule
do_notify_delete() {
    [ $# -ne 2 ] && err "usage: do_notify_delete SUB EMAIL" && return 1
    local sub="$1"
    local email="$2"
    local notify
    if member_of "$sub" $(do_list) ; then
        notify=$(git config --file .gitmodules --get "submodule.$sub.notify")
        notify=$(remove_arg "$email" "$notify")
        verr "setting notifications for $sub to $notify"
        git config --file .gitmodules --add "submodule.$sub.notify" "$notify"
    else
        err "do_notify_delete: not a submodule: $sub"
        return 1
    fi
    return 0
}

# before tests
do_before() {
    local current
    local reffile
    vverr "-- before --"
    if [ ! -d ".git-ci" ]; then
        mkdir ".git-ci"
    fi
    current=".git-ci/current"
    if [ -d "$current" ]; then
        rm -r "$current"
    fi
    mkdir "$current"
    ref="$(git rev-parse @)"
    reffile="$current/.ref"
    echo "$ref" > "$reffile"
    verr "PROJECT @ $ref "
    for sub in $(do_list); do
        safe=$(submodule_escape $sub)
        ref="$(git -C $sub rev-parse @)"
        reffile="$current/$safe.ref"
        echo "$ref" > "$reffile"
        verr "SUBMODULE $sub @ $ref "
    done
}


# show current versions
do_current() {
    vverr "-- current --"
    local current
    local current_ref
    local url
    current=".git-ci/current"
    if [ ! -d "$current" ]; then
        verr 'no changes to show (did you run --before?)'
        return 1
    fi
    current_ref="$(cat $current/.ref)"
    log "Current PROJECT ${current_ref}"
    for sub in $(do_list); do
        safe=$(submodule_escape $sub)
        current_ref="$(cat $current/$safe.ref)"
        log "SUBMODULE $sub @ $current_ref"
    done
}

# show previous versions
do_prev() {
    vverr "-- prev --"
    local prev
    local prev_ref
    local url
    prev=".git-ci/prev"
    if [ ! -d "$prev" ]; then
        verr 'no changes to show (did you run --after?)'
        return 1
    fi
    prev_ref="$(cat $prev/.ref)"
    log "Previous PROJECT ${prev_ref}"
    for sub in $(do_list); do
        safe=$(submodule_escape $sub)
        prev_ref="$(cat $prev/$safe.ref)"
        log "SUBMODULE $sub @ $prev_ref"
    done
}

# take a github remote origin and convert it to a project URL
getorigin() {
    local origin="$1"
    local member="${origin##git@github.com:}"
    if [ "$member" != "$origin" ]; then
        # convert git@github.com: to https://github.com/
        origin="https://github.com/$member"
    fi
    # remove .git suffix
    origin="${origin%%.git}"
    echo $origin
}

# show changes
do_changes() {
    vverr "-- changes --"
    local current
    local prev
    local current_ref
    local prev_ref
    local url
    current=".git-ci/current"
    prev=".git-ci/prev"
    if [ ! -d "$current" ]; then
        verr 'no changes to show (did you run --before?)'
        return 1
    fi
    if [ ! -d "$prev" ]; then
        verr 'no changes to show (did you run --after?)'
        return 1
    fi
    prev_ref="$(cat $prev/.ref)"
    current_ref="$(cat $current/.ref)"
    if [ "$current_ref" = "$prev_ref" ]; then
        log "PROJECT UNCHANGED @ $current_ref"
    else
        url=$(getorigin $(git remote get-url origin))
        url="$url/compare/${prev_ref}..${current_ref}"
        log "PROJECT $url"
    fi
    for sub in $(do_list); do
        safe=$(submodule_escape $sub)
        prev_ref="$(cat $prev/$safe.ref)"
        current_ref="$(cat $current/$safe.ref)"
        if [ "$current_ref" = "$prev_ref" ]; then
            log "SUBMODULE $sub UNCHANGED @ $current_ref"
        else
            url="$(git config --file .gitmodules --get submodule.$sub.url)"
            url="${url%%.git}"
            url="$url/compare/${prev_ref}..${current_ref}"
            log "SUBMODULE $sub $url"
        fi
    done
    if [ -n "$BUILD_URL" ]; then
        log ""
        log "See the full console log at ${BUILD_URL%/}/consoleFull"
    fi
}

# after tests
do_after() {
    local current
    local prev
    local prev_result
    local current_ref
    local prev_ref
    vverr "-- after $result --"
    current=".git-ci/current"
    if [ ! -d "$current" ]; then
        do_before # forgot to run --before ?
    fi
    echo "$result" > "$current/.result"
    prev=".git-ci/prev"
    if [ -d "$prev" ]; then
        prev_result="$(cat $prev/.result)"
        if [ "$result" = "0" ]; then
            if [ "$prev_result" = "0" ]; then
                verr "still successful"
            else
                verr "build fixed"
                do_changes
                if [ -n "$notify" ]; then
                    verr "sending notifications..."
                    local subject="FIXED $(basename $cwd) SUBMODULE CHANGED: "
                    for sub in $(do_list); do
                        safe=$(submodule_escape $sub)
                        prev_ref="$(cat $prev/$safe.ref)"
                        current_ref="$(cat $current/$safe.ref)"
                        if [ "$current_ref" != "$prev_ref" ]; then
                            emails="$(git config --file .gitmodules --get submodule.$sub.notify)"
                            if [ -n "$emails" ]; then
                                log "SUBMODULE $sub changed, notifying: $emails"
                                do_changes | mailx -s "$subject $sub" $emails
                            fi
                        fi
                    done
                fi
            fi
        else
            if [ "$prev_result" = "0" ]; then
                verr "this build failed"
                do_changes
                if [ -n "$notify" ]; then
                    verr "sending notifications..."
                    local subject="FAILED $(basename $cwd) SUBMODULE CHANGED: "
                    for sub in $(do_list); do
                        safe=$(submodule_escape $sub)
                        prev_ref="$(cat $prev/$safe.ref)"
                        current_ref="$(cat $current/$safe.ref)"
                        if [ "$current_ref" != "$prev_ref" ]; then
                            emails="$(git config --file .gitmodules --get submodule.$sub.notify)"
                            if [ -n "$emails" ]; then
                                log "SUBMODULE $sub changed, notifying: $emails"
                                do_changes | mailx -s "$subject $sub" $emails
                            fi
                        fi
                    done
                fi
            else
                verr "still failing"
            fi
        fi
        rm -r "$prev"
    else
        verr "no previous results..."
    fi
    mv "$current" "$prev"
}

# process command line args
verbose=0
action="main"
result=""
notify=""
minargs=0 # needs at least this many args
maxargs=0 # handles at most this many args
args=""
while [ "$#" -gt 0 ]; do
    case "$1" in
        (-a|--after)
            if [ $# -lt 2 ]; then
                action="usage"
            else
                action="after"
                result="$2"
                shift
            fi
            ;;
        (-A|--notify-add)
            minargs=2
            maxargs=2
            action="notify_add"
            ;;
        (-b|--before)
            action="before"
            ;;
        (-c|--changes)
            action="changes"
            ;;
        (-C|--current)
            action="current"
            ;;
        (-D|--notify-delete)
            minargs=2
            maxargs=2
            action="notify_delete"
            ;;
        (-h|--help)
            action="usage"
            break
            ;;
        (-l|--list)
            action="list"
            break
            ;;
        (-L|--notify-list)
            minargs=1
            maxargs=100
            action="notify_list"
            ;;
        (-n|--notify)
            notify="$1"
            ;;
        (-p|--prev)
            action="prev"
            ;;
        (-v|--verbose)
            verbose=$(($verbose + 1))
            ;;
        (-*)
            err "${program}: invalid option: $1"
            action="usage"
            ;;
        (*)
            if [ -z "$args" ]; then
                args="$1"
            else
                args="$args $1"
            fi
            ;;
    esac
    shift
done
if [ $(args_size $args) -lt $minargs ]; then
    err "${program}: $action needs at least $minargs args"
    action="usage"
else
    if [ $(args_size $args) -gt $maxargs ]; then
        err "${program}: $action takes at most $maxargs args"
        action="usage"
    fi
fi
if [ ! -d ".git" ]; then
    err "not in a git repo"
    action="usage"
fi
if [ $verbose -gt 0 ]; then
    printvars program dir cwd verbose action result notify
fi
if [ "$action" = "main" ]; then
    verr "nothing to do"
else
    do_$action $args
fi

exit 0
